{
  "lastReviewedOn": "06 Dec 2024",
    "content":"<h1>Get Market Direction</h1>   <p><mark><b>POST</b> &rarr; /v1/trading_pairs/market_direction</mark></p>   <p>Calculates the market direction based on the trading history data provided.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre>   <h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li> <li><strong>Content-Type:</strong> application/json</li>         </ul><h2>Body</h2>The body of the request should be a JSON object with the same structure as the following:      <pre class=\"centre\"><code>{\n  \"BTC_USD\": {\n    \"open\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  \"another-trading-pair\": {\n    \"open\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  ...\n}</code></pre><p> Since the route supports batching, more than one trading pair can be sent to the endpoint at once.</p><h3>Specifications</h3>     <ul><li><strong>Trading Pair:</strong> The market symbol for the data (e.g., BTC_USD). Ensure the two currencies are seperated by an underscore and not a forward slash.</li><li><strong>Open:</strong> The <code>open</code> data array requires the open price of the candlestick. This is different from our other endpoints which have distinct <code>open_time</code> and <code>open_price</code> data arrays.</li><li><strong>Number of Data Points:</strong> For each trading pair, it is recommended to provide at least <em>20</em> data points.</li></ul> <h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the input data adheres to the specifications.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n    \"success\": true,\n    \"msg\": \"Calculated market direction based on provided data.\",\n    \"msgType\": \"Success\",\n    \"records\": [\n        {\n            \"currency\": \"BTC_USD\",\n            \"market_direction\": \"Bear\"\n        },\n        {\n            \"currency\": \"ETH_USD\",\n            \"market_direction\": \"Bull\"\n        }\n    ]\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/trading_pairs/market_direction\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = (\n    f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n)\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n# Prepare the trading history data according to the specifications\ntrading_history_data = {\n    \"BTC_USD\": {\n        \"open\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n    \"ETH_USD\": {\n        \"open\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n}\n\n# Making a POST request to the API endpoint\nresponse = requests.post(\n    url=request_url,\n    headers=request_headers,\n    json=trading_history_data,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Handling the response\nif response_success and response_records:\n    # Process the response records\n    for record in response_records:\n        # Extract the trading pair and the generated market direction\n        trading_pair = record[\"currency\"]\n        market_direction = record[\"market_direction\"]\n\n        # Print the trading pair and the generated market direction\n        print(f\"{trading_pair} - Market Direction: {market_direction}\")\nelse:\n    print(f\"Response Message: {response_msg}\")\n</code></pre>",
  "i18n_content": "docs_nav_tree.api_documentation.v1.endpoints.get-market-direction.content"
}
