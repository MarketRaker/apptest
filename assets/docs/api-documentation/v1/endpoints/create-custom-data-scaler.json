{
  "lastReviewedOn": "05 Dec 2024",
  "content":"<h1>Create Custom Data Scaler</h1>   <p><mark><b>POST</b> &rarr; /v1/custom/data_scaler/register</mark></p>   <p>Create your own custom data scalers to be used with the MarketRaker AI model by sending historical trading data.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre><h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li> <li><strong>Content-Type:</strong> application/json</li>         </ul><h2>Body</h2><p>The request body must be a JSON object formatted as shown below, with keys representing trading pairs and their corresponding data arrays.</p>      <pre class=\"centre\"><code>{\n  \"MY_BTC_USD\": {\n    \"open_time\": [1732687200, 1732644000, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  \"another-custom-pair\": {\n    \"open_time\": [1732687200, 1732644000, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  ...\n}</code></pre><p> Since the route supports batching, more than one trading pair along with its data can be sent to the endpoint simultaneously. Note however, that should one trading pair fail to create a data scaler, the entire HTTP request will fail.</p><h3>Specifications</h3>     <ul><li><strong>Trading Pair:</strong> The market symbol for the data. The format dependends on how you want to reference it.</li><li><strong>Number of Data Points:</strong>Each trading pair requires a minimum of <em>200</em> data points to generate a data scaler. While there is no strict upper limit on the number of data points, providing more data may improve the accuracy of the scaler although this is not guaranteed.</li><li><strong>Open Time:</strong> The <code>open_time</code> data array requires the open time of the candlestick as a Unix formatted timestamp in seconds.</li><li><strong>Interval:</strong> Data points must be spaced <em>12 hours</em> apart. For stock data, where markets are not open 24/7, provide the first available data point after the 12-hour interval.</li></ul> <h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the input data adheres to the specifications.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n \"success\": true,\n \"msg\": \"Custom data scaler(s) registered successfully.\",\n \"msgType\": \"Success\",\n \"records\": []\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/custom/data_scaler/register\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n# Prepare the trading history data according to the specifications\ntrading_history_data = {\n    \"BTC_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732644000],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n    \"ETH_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732644000],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n}\n\n# Make a POST request to the API endpoint\nresponse = requests.post(\n    url=request_url,\n    headers=request_headers,\n    json=trading_history_data,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Printing the response\nprint(f\"Response: {response_msgType} - {response_msg}\")\n</code></pre>",
  "i18n_content": "docs_nav_tree.api_documentation.v1.endpoints.create-custom-data-scaler.content"
}
