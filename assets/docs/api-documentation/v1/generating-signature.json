{
  "lastReviewedOn": "05 Dec 2024",
  "content": "<h1>Generating a Signature</h1>\n<p>\n  To authenticate your API requests, generate a signature using your signing key. This ensures the request's authenticity and integrity.\n</p>\n<ol>\n  <li>\n    <strong>Prepare the string to sign:</strong> The exact structure of the string varies by endpoint, but it generally includes:\n    <ul>\n      <li>Relevant data field or payload (e.g., request-specific parameters).</li>\n      <li>The current timestamp formatted as a Unix timestamp in seconds.</li>\n      <li>Your unique application ID.</li>\n    </ul>\n  </li>\n  <li>\n    <strong>Example:</strong> Below is an example of the string that needs to be signed. Both a placeholder template and a fully populated string are provided for reference:\n  <pre><code>placeholder_string = f\"{data_field}{current_timestamp_seconds}{application_id}\"</code></pre>\n <pre><code>populated_string = \"BTC_USD1706504700e91523761f929ed7d1ea2f830fe2aec9\"</code></pre>\n  </li>\n  <li>\n    <strong>Generate the Signature:</strong> Use your <a href=\"#/docs/api-documentation/v1/getting-started\">signing key</a> to create a signature based on the populated string. Below is an example using version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a>   <div class=\"centre\"> <pre><code>signing_key = SigningKey(\n    your_signing_key_string, encoder=HexEncoder\n)\nsignature = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()</code></pre></div>\n  </li>\n</ol>",
  "i18n_content": "docs_nav_tree.api_documentation.v1.generating-signature.content"
}
