{
  "docs_nav_tree.introduction.name": "Introduction",
  "docs_nav_tree.introduction.content": "<div class=\"logo\"><img src=\"/assets/images/MARKETRAKER_LOGO_RC_WITH_TEXT.png\"></div> <h1>Introduction to MarketRaker AI</h1><p>MarketRaker AI emerges as a revolutionary solution in the realm of trading platforms, aiming to declutter the overwhelming noise often associated with market analyses. By focusing on precision and clarity, MarketRaker AI endeavors to eliminate the tedious nuances of chart analysis, allowing traders to home in on what truly matters: the indicators.</p><p>As the world of trading burgeons with data and charts, the real challenge is sifting through the extraneous to find the gems of actionable insights. MarketRaker AI rises to this challenge, serving as a filter to spotlight only the most relevant indicators tailored to the trader's preferred risk profile. It's a transformative approach, turning the spotlight away from overwhelming data and towards informed, strategic decision-making.</p><p>Embrace a new era of trading with MarketRaker AI, where we champion simplicity without compromising on depth. Say goodbye to cluttered charts and hello to clear, actionable indicators that empower you to trade with confidence.</p>",
  "docs_nav_tree.introduction.what_is_marketraker.name": "What is MarketRaker",
  "docs_nav_tree.introduction.what_is_marketraker.content": "<h1>What is MarketRaker AI?</h1><p>MarketRaker AI is more than just another trading tool; it represents the next evolution in financial chart analysis. In the vast landscape of financial markets, traders are often overwhelmed by the myriad of indicators available to them. While traditional trading indicators are invaluable, they predominantly serve as lagging indicators, heavily reliant on historical data. While historical data paints a picture of past market behaviors, it doesn't always provide a clear path for future market movements.</p><p>This is where MarketRaker AI steps in. By harnessing the power of advanced AI models, we take these trading indicators, bundle them, and assess their strength in real-time. Our objective is not just to rely on past data but to predict the accuracy of these indicators in future market scenarios, providing a glimpse into potential price variances. Moreover, with the vast amount of data available from trading platforms like TradeView and others, our AI-driven approach is designed to sift through the noise and provide clear, actionable insights.</p><p>But MarketRaker AI's innovation doesn't stop there. Recognizing that traders have different risk appetites, these insights are then categorized into varying risk levels. Users can seamlessly subscribe to these levels, ensuring they receive insights tailored to their trading strategy and risk preference. In essence, MarketRaker AI bridges the gap between historical data and predictive analytics, offering a streamlined approach to trading in today's fast-paced markets.</p>",
  "docs_nav_tree.introduction.features_overview.name": "Features Overview",
  "docs_nav_tree.introduction.features_overview.content": "<h1>Features Overview</h1><p>MarketRaker AI revolutionizes the trading space, simplifying the cluttered and chaotic world of market indicators by providing clear, AI-driven insights for swing traders. Our platform is a game-changer, offering the following unique features:</p><ul><li><strong>AI Indicators and Strength/Risk Analysis:</strong> Leveraging advanced AI, MarketRaker AI evaluates trading indicators, categorizing them based on calculated risk and strength to guide your trading decisions.</li><li><strong>Custom Risk Categorization:</strong> Tailor your trading experience by selecting risk categories that match your investment comfort, streamlining the indicators you receive.</li><li><strong>Swing Trading Focus:</strong> Designed for the strategic swing trader, not for day trading, offering refined, longer-term market perspectives.</li><li><strong>Real-time Alerts via Telegram & Discord:</strong> Stay ahead with immediate alerts through Telegram and Discord integrations, ensuring you never miss a valuable insight.</li><li><strong>Webhooks for Custom Trading Bots:</strong> Connect your trading setup with our webhooks feature, allowing for automated trading or custom-built bots based on our indicators.</li><li><strong>User-Friendly Interface:</strong> Experience market analysis without the noise, thanks to our clean, intuitive interface.</li><li><strong>Market Coverage:</strong> Direct access to data from 100 stocks and 30 cryptos, providing a wide range of trading opportunities.</li><li><strong>Subscription-Based Service:</strong> Utilize the RAKER Token on the Cardano framework for seamless, secure subscription payments.</li></ul><p>MarketRaker AI is committed to clarity, efficiency, and most importantly, trader empowerment. By removing the common barriers to market understanding, we provide a platform where strategic trading decisions are clearer and more accessible.</p>",
  "docs_nav_tree.introduction.how_marketraker_works.name": "How MarketRaker Works",
  "docs_nav_tree.introduction.how_marketraker_works.content": "<h2>How MarketRaker AI Works?</h2><p>MarketRaker AI, in its Alpha release, represents a paradigm shift in the way trading indicators are utilized. Through a blend of carefully curated trading indicators and AI-driven analytics, MarketRaker AI strives to declutter the complex world of trading and provide actionable insights to its users.</p><p>The current suite of indicators being analyzed includes:<ul><li>Market-Cipher-B-free</li><li>Market-Cipher-A-free</li><li>WaveTrend Oscillator</li><li>Price-Divergence</li><li>Plain Stochastic Divergence</li><li>MFI+RSI Area</li></ul></p><p>Rather than inundating users with disparate buy or sell signals from each indicator, MarketRaker AI's AI consolidates these indicators to produce a unified buy or sell signal. This AI-driven decision-making process is further refined using an intelligent backtesting mechanism. Each indicator, before being sent out, is rigorously backtested against historical data, allowing us to assign a confidence score. This score is then mapped to predefined risk categories, ensuring that users receive insights that align with their risk appetites.</p><p>Subscribing to a specific risk category allows users to tailor their MarketRaker AI experience. They are then provided with indicators that resonate with their chosen risk level and are associated with the stocks or cryptos they are tracking. This bespoke approach ensures that users are not overwhelmed with irrelevant data, allowing them to make more informed trading decisions.</p><h2>Introducing the RAKER Token</h2><p>The RAKER token is the lifeblood of the MarketRaker AI platform. By sidestepping traditional fiat-based subscription models, the RAKER token paves the way for a community-driven ecosystem. As MarketRaker AI's reputation and efficacy grow, token holders can potentially benefit from reselling their subscriptions within the community, fostering a dynamic and self-sustaining environment.</p><h2>Token-Based Access & Community Engagement</h2><p>RAKER is not just a token; it's the gateway to MarketRaker AI's treasure trove of insights. A holding of 10 RAKER tokens grants a user one month of access, while a stash of 1000 tokens offers lifetime privileges. This token-centric model not only ensures a tangible stake in the platform's success for each user but also amplifies the sense of community and collective growth.</p>",

  "docs_nav_tree.getting_started.name": "Getting Started",
  "docs_nav_tree.getting_started.first_time_user_guide.name": "First Time User Guide",
  "docs_nav_tree.getting_started.first_time_user_guide.content": "<h1>MarketRaker AI First Time User Guide</h1><p>Welcome to MarketRaker AI! This guide will help you seamlessly register, select your risk, link your ADA wallet, and buy RAKER Tokens. Just follow these simple steps:</p><h3>1. Registration and Initial Setup</h3><ol><li>Visit the MarketRaker AI homepage.</li><li>Click on the \"Register\" or \"Sign Up\" button.</li><li>Go to register, and then select your risk.</li><li>Once your risk is selected, choose the stocks or crypto you are interested in.</li><li>View the indicators based on this selection and finalize.</li><li>You'll see various registration options. Select \"Continue with Google\".</li><li>Choose your Google account and grant the necessary permissions.</li><li>Complete any additional profile information required by MarketRaker AI.</li></ol><h3>2. Buying RAKER Tokens on MinSwap</h3><ol><li>Go to the MinSwap exchange platform.</li><li>Search for the 'RAKER' token in the token list.</li><li>Connect your ADA wallet to MinSwap.</li><li>Enter the amount of RAKER tokens you wish to purchase.</li><li>Review the transaction details, ensuring everything looks correct.</li><li>Confirm the transaction and wait for it to complete.</li><li>Once done, you should see the RAKER tokens in your ADA wallet!</li></ol><h3>3. Linking your ADA wallet</h3><ol><li>Once registered and logged in, navigate to the 'Wallet' or 'Profile' section.</li><li>Click on 'Link ADA Wallet' or a similar option.</li><li>Follow the on-screen instructions to securely connect your ADA wallet.</li></ol>",
  "docs_nav_tree.getting_started.installation_setup.name": "Installation & Setup",
  "docs_nav_tree.getting_started.installation_setup.content": "<h1>Installation and Setup Guide for MarketRaker AI</h1><p>Welcome to MarketRaker AI, your go-to platform for actionable trading insights and indicators. Setting up MarketRaker AI to receive indicators for your favorite stocks or cryptocurrencies is a breeze. Follow the steps below to get started:</p><h2>Step 1: Accessing the Platform</h2><ol><li>Open your preferred web browser.</li><li>In the address bar, type in or copy-paste the following URL: <a href=\"https://raker.market\" target=\"_blank\">https://raker.market</a></li><li>Press <code>Enter</code> or <code>Return</code> on your keyboard to navigate to the MarketRaker AI platform.</li></ol><h2>Step 2: Navigating to the Discover Page</h2><ol><li>Once you're on the MarketRaker AI homepage, locate the navigation bar or menu.</li><li>Click on the <code>Discover</code> option. This will take you to a dedicated page where you can explore various stocks and cryptocurrencies.</li></ol><h2>Step 3: Selecting Your Interests</h2><ol><li>On the <code>Discover</code> page, you'll find a list of available stocks and cryptocurrencies.</li><li>Browse through the list or use the search functionality to quickly find your interests.</li><li>Once you've identified a stock or cryptocurrency you're interested in, click on it. This action signals your interest in receiving indicators for that particular asset.</li></ol><h2>Step 4: Setting Up Indicators</h2><ol><li>After selecting your desired stocks or cryptocurrencies, follow any additional prompts or settings to fine-tune the type of indicators you wish to receive.</li><li>Ensure that you save or confirm your settings as required.</li></ol><h2>Step 5: Finalizing and Exploring</h2><ol><li>Once you've set up your indicators, you can return to the main dashboard or explore other features of MarketRaker AI.</li><li>Remember, you can always come back to the <code>Discover</code> page to add more assets or adjust your indicator preferences.</li></ol><hr><p>That's it! You've now successfully set up MarketRaker AI to receive tailored trading indicators for your chosen stocks and cryptocurrencies. Dive in and make the most of the insights MarketRaker AI has to offer. Happy trading!</p>",
  "docs_nav_tree.getting_started.navigating_dashboard.name": "Navigating the Dashboard",
  "docs_nav_tree.getting_started.navigating_dashboard.content": "<h1>Navigating the Dashboard</h1><p>The MarketRaker AI dashboard is your central hub for accessing critical trading indicators and insights. Designed for user-friendliness and quick access to vital information, navigating through the dashboard is intuitive and straightforward. Here's a quick guide to help you make the most of the dashboard:</p><h2>Categories</h2><p>The dashboard is organized into distinct categories to help streamline your browsing experience:</p><ul><li><strong>All:</strong> This category provides a comprehensive view, showcasing indicators across both stocks and cryptocurrencies.</li><li><strong>Stock:</strong> If you're specifically interested in the stock market, this category focuses solely on stock indicators.</li><li><strong>Crypto:</strong> For cryptocurrency enthusiasts, this category highlights indicators pertinent to the crypto market.</li></ul><h2>Indicator Types</h2><p>MarketRaker AI offers a variety of indicator types to cater to your trading needs:</p><ul><li><strong>Future Predicted Indicators:</strong> Get a glimpse into potential future trends with indicators that project possible market movements based on sophisticated AI analysis.</li><li><strong>Today's Indicators:</strong> Stay updated with the current market pulse. These indicators provide insights into today's market conditions, helping you make informed decisions in real-time.</li><li><strong>Archived Indicators:</strong> A treasure trove of historical data, this section lets you review past indicators, offering valuable insights into previous market conditions and trends.</li></ul><h2>Real-Time Price Monitoring</h2><p>For each stock or cryptocurrency listed on the dashboard, you'll also find its price displayed. Please note that these prices are delayed by 15 minutes, ensuring you have a near real-time perspective on your assets' performance.</p><hr><p>The MarketRaker AI dashboard is designed to equip you with all the tools you need for successful trading. Familiarize yourself with its features, and harness the power of real-time data and predictive analytics to make informed trading decisions. Remember, MarketRaker AI is here to guide you every step of the way. Happy trading!</p>",
  "docs_nav_tree.getting_started.telegram_integration.name": "Telegram Integration",
  "docs_nav_tree.getting_started.telegram_integration.content": "<h1>Telegram Integration</h1><p>Stay updated on-the-go with MarketRaker AI's Telegram integration! Now, you can receive all your vital trading indicators and notifications directly on Telegram, ensuring you never miss an important update, no matter where you are. Setting it up is easy and straightforward:</p><h2>Steps to Integrate with Telegram</h2><ol><li>Navigate to the <strong>Profile</strong> section on the MarketRaker AI platform.</li><li>Look for the <strong>Integrations</strong> option and select it.</li><li>Click on the <strong>Telegram icon</strong> presented.</li><li>Follow the prompted steps to complete the integration process. Once done, you're all set to receive MarketRaker AI notifications on your Telegram!</li></ol><h2>Managing Notifications</h2><p>Receiving too many notifications? No problem! You can easily manage the frequency of your alerts:</p><ul><li><strong>Subscribe to Fewer Assets:</strong> If you feel overwhelmed by the number of indicators, consider subscribing to fewer stocks or cryptos.</li><li><strong>Toggle Off Unwanted Assets:</strong> Another option is to switch off notifications for specific stocks or cryptos that you're not currently interested in.</li></ul><hr><p>With MarketRaker AI's Telegram integration, trading insights are always at your fingertips. Customize your notification preferences to suit your needs, and stay ahead in the trading game. We're committed to ensuring you have the best trading experience possible, and our Telegram integration is just one of the many ways we're making that happen. Dive in and stay informed!</p>",
  "docs_nav_tree.getting_started.discord_integration.name": "Discord Integration",
  "docs_nav_tree.getting_started.discord_integration.content": "<h1>Discord Integration</h1><p>Stay connected and informed with MarketRaker AI's Discord integration! Seamlessly receive all your essential trading indicators and alerts directly on Discord, ensuring timely updates no matter your location. Integration is simple and user-friendly:</p><h2>Steps to Integrate with Discord</h2><ol><li>Go to the <strong>Profile</strong> section on the MarketRaker AI platform.</li><li>Search for the <strong>Integrations</strong> option and select it.</li><li>Click on the <strong>Discord icon</strong> provided.</li><li>Follow the displayed steps to finalize the integration. Once completed, you're ready to receive MarketRaker AI notifications on your Discord!</li></ol><h2>Managing Notifications</h2><p>Feeling swamped with too many alerts? You're in control:</p><ul><li><strong>Limit Your Subscriptions:</strong> Minimize notifications by subscribing to fewer stocks or cryptos.</li><li><strong>Deactivate Certain Assets:</strong> You can also turn off notifications for specific stocks or cryptos that aren't currently of interest to you.</li></ul><hr><p>With MarketRaker AI's Discord integration, you're always in the loop with the latest trading insights. Tailor your notification settings to your preferences, ensuring a smooth and efficient trading experience. We're dedicated to offering you a top-tier trading journey, and our Discord integration is a testament to that commitment. Dive in, stay updated, and trade smartly!</p>",
  "docs_nav_tree.getting_started.webhooks_integration.name": "WebHooks Integration",
  "docs_nav_tree.getting_started.webhooks_integration.content": "<h1>Webhook Integration</h1><p>MarketRaker AI introduces a seamless Webhook integration, allowing users to bridge the platform with their trading bots effortlessly. By leveraging webhooks, you can automate trading actions based on the indicators received from MarketRaker AI, ensuring timely and strategic trades.</p><h2>Steps to Set Up Webhook Integration</h2><ol><li>Go to the <strong>Profile</strong> section on the MarketRaker AI platform.</li><li>Locate the <strong>Integrations</strong> option and select it.</li><li>Locate the <strong>Webhooks</strong> option and select it.</li><li>Enter your webhook URL where you wish to receive MarketRaker AI notifications.</li><li>Once set up, any indicator from MarketRaker AI will trigger a webhook event, sending the data to your specified endpoint.</li></ol><h2>Strategic Bot Trading with Webhooks</h2><p>With webhooks in place, your trading bot can listen for these signals and be configured to execute buy or sell orders based on the received indicators. For instance, a positive momentum indicator from MarketRaker AI can prompt your bot to initiate a buy order. Conversely, certain sell signals can guide your bot to close a position, ensuring optimal trading decisions.</p><h2>Stay Tuned for More!</h2><p>We recognize the immense potential of automated trading. As such, we'll be rolling out comprehensive guides on how to best utilize 3rd party bots with MarketRaker AI's webhook functionality. Our goal is to provide you with the tools and knowledge to make the most of the automated trading landscape. Keep an eye out for more information and deepen your strategic trading approach with MarketRaker AI!</p>",

  "docs_nav_tree.api_documentation.name": "API Documentation",
  "docs_nav_tree.api_documentation.v1.overview.name": "Overview",
  "docs_nav_tree.api_documentation.v1.overview.content": "<h1>Overview</h1><p>MarketRaker's API provides a range of endpoints that allow you to seamlessly interact with the platform. Whether you're fetching market indicators, managing custom data scalers, or exploring advanced analytics, the API is designed to support your needs with secure access through your unique application ID and signature authentication. Endpoints that support batching allow multiple trading pairs to be processed in a single request, with credit costs applied per pair<p><table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>HTTP Type</th>\n      <th>Support Batching</th>\n      <th>Credit Cost*</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Get Latest Indicator</td>\n      <td>GET</td>\n      <td><span class=\"cross\">✘</span></td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Generate Indicators</td>\n      <td>POST</td>\n      <td><span class=\"check\">✔</span></td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Get Market Direction</td>\n      <td>POST</td>\n      <td><span class=\"check\">✔</span></td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Create Custom Data Scaler</td>\n      <td>POST</td>\n      <td><span class=\"check\">✔</span></td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Generate Indicators with Custom Data Scalers</td>\n      <td>POST</td>\n      <td><span class=\"check\">✔</span></td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Get Custom Data Scalers</td>\n      <td>GET</td>\n      <td><span class=\"cross\">✘</span></td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <td>Delete Custom Data Scaler</td>\n      <td>DELETE</td>\n      <td><span class=\"cross\">✘</span></td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<em><p>*Batched requests are billed separately for each trading pair in the batch, with the credit cost applied to each trading pair. MarketRaker AI reserves the right to modify the credit costs associated with any endpoint at its discretion and without prior notice.</p></em>",
  "docs_nav_tree.api_documentation.v1.getting-started.name": "Getting Started",
  "docs_nav_tree.api_documentation.v1.getting-started.content": "<h1>Getting Started with the MarketRaker API</h1>\n<p>\n  Welcome to the MarketRaker API, a powerful tool designed to provide trading indicators and insights for various markets. By using our API, you agree to be bound by our <a href='#/docs/legal/terms-of-use'>Terms and Conditions</a> and <a href='#/docs/legal/privacy-policy'>Privacy Policy</a>. Please review them carefully before proceeding. Additionally, ensure you have the following ready:\n</p>\n<ul>\n  <li>\n    <strong>Application ID:</strong>\n    Obtain a valid application ID from the <a href='#/integrations/api-channel'>API URL integration page</a>. This ID uniquely identifies your application and is required for all API requests.\n  </li>\n  <li>\n    <strong>Signing Key:</strong>\n    Your unique signing key also obtained from the API URL integration page is used to sign requests to the MarketRaker API. Keep your signing key secret and do not share it with anyone, as it verifies your identity.\n    <br><em>Note: MarketRaker does not store your signing key. If you lose it, you will need to generate a new one.</em>\n  </li>\n  <li>\n    <strong>API Credits:</strong>\n    Ensure you have sufficient API credits to make requests.\n  </li> \n</ul>",
  "docs_nav_tree.api_documentation.v1.generating-signature.name": "Generating a Signature",
  "docs_nav_tree.api_documentation.v1.generating-signature.content": "<h1>Generating a Signature</h1>\n<p>\n  To authenticate your API requests, generate a signature using your signing key. This ensures the request's authenticity and integrity.\n</p>\n<ol>\n  <li>\n    <strong>Prepare the string to sign:</strong> The exact structure of the string varies by endpoint, but it generally includes:\n    <ul>\n      <li>Relevant data field or payload (e.g., request-specific parameters).</li>\n      <li>The current timestamp formatted as a Unix timestamp in seconds.</li>\n      <li>Your unique application ID.</li>\n    </ul>\n  </li>\n  <li>\n    <strong>Example:</strong> Below is an example of the string that needs to be signed. Both a placeholder template and a fully populated string are provided for reference:\n  <pre><code>placeholder_string = f\"{data_field}{current_timestamp_seconds}{application_id}\"</code></pre>\n <pre><code>populated_string = \"BTC_USD1706504700e91523761f929ed7d1ea2f830fe2aec9\"</code></pre>\n  </li>\n  <li>\n    <strong>Generate the Signature:</strong> Use your <a href=\"#/docs/api-documentation/v1/getting-started\">signing key</a> to create a signature based on the populated string. Below is an example using version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a>   <div class=\"centre\"> <pre><code>signing_key = SigningKey(\n    your_signing_key_string, encoder=HexEncoder\n)\nsignature = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()</code></pre></div>\n  </li>\n</ol>",
  "docs_nav_tree.api_documentation.v1.endpoints.name": "Endpoints",
  "docs_nav_tree.api_documentation.v1.endpoints.get_latest_indicator.name": "Get Latest Indicator",
  "docs_nav_tree.api_documentation.v1.endpoints.get-latest-indicator.content": "<h1>Get Latest Indicator</h1>   <p><mark><b>GET</b> &rarr; /v1/trading_pairs/{trading_pair}/latest_indicator/{request_timestamp_seconds}</mark></p>   <p>Retrieve historical trading indicators for a given trading pair and timeframe. The endpoint searches for the most recent indicator in the 12 hours prior to the specified timestamp.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{trading_pair}{request_timestamp_seconds}{current_unix_timestamp_seconds}{application_id}\"</code></pre>  <h2>Path Parameters</h2><p>The following path parameters form part of the endpoint URL string:</p>     <ul><li><strong>trading_pair:</strong> The trading pair for which you want to request the latest indicator. Ensure the currencies are seperated by a underscore and not a forward slash e.g. 'BTC_USD'.</li> <li><strong>request_timestamp_seconds:</strong> The Unix formatted timestamp in seconds from where the search should start. The newest indicator in the 12 hours preceding this timestamp will be returned if any is found.</li> </ul> <h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li>  </ul><h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the path parameters are valid.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n  \"success\": true,\n  \"msg\": \"Indicator found.\",\n  \"msgType\": \"Success\",\n  \"records\": [\n    {\n      \"trading_pair\": \"SOL/USD\",\n      \"indicator\": {\n        \"trading_type\": \"Long\",\n        \"leverage\": 1,\n        \"buy_price\": 236.9,\n        \"sell_price\": 238.951,\n        \"buy_date\": \"2024-12-05T06:00:00\",\n        \"sell_prediction_date\": \"2024-12-05T18:00:00\",\n        \"risk\": 9,\n        \"market_direction\": \"Bull\",\n        \"percentage_change\": 0.8657694,\n        \"stoploss\": 1,\n        \"trading_type_24h\": null,\n        \"percentage_change_24h\": 1.1441707611083984,\n        \"risk_24h\": 8,\n        \"leverage_24h\": 1,\n        \"stoploss_24h\": 1\n      }\n    }\n  ]\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Trading pair and the Unix timestamp for the request - replace these values with your own\ntrading_pair: str = \"BTC_USD\"\nrequest_timestamp_seconds: int = 1732276998\n\n# Constructing the request URL\nrequest_url: str = (\n    f\"{BASE_URL}/v1/trading_pairs/{trading_pair}/latest_indicator/{request_timestamp_seconds}\"\n)\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = (\n    f\"{trading_pair}{request_timestamp_seconds}{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n)\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n}\n\n# Making a GET request to the API endpoint\nresponse = requests.get(url=request_url, headers=request_headers)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Print the full response for debugging\nprint(f\"Full response: {response_json}\")\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Handling the response\nif response_success and response_records:\n    # Printing the requested indicator for the trading pair\n    record =  response_records[0]\n    print(f\"Trading Pair: {record['trading_pair']}\")\n    print(f\"Generated Indicator: {record['indicator']}\")\nelse:\n    print(f\"Response Message: {response_msg}\")</code></pre>",
  "docs_nav_tree.api_documentation.v1.endpoints.generate_indicators.name": "Generate Indicators",
  "docs_nav_tree.api_documentation.v1.endpoints.generate-indicators.content": "<h1>Generate Indicators</h1>   <p><mark><b>POST</b> &rarr; /v1/trading_pairs/{trading_pair_type}/generate_indicators</mark></p>   <p>Generate trading indicators for trading pairs of a specific trading pair type using MarketRaker's data scalers by sending historical trading data for each.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{trading_pair_type}{current_unix_timestamp_seconds}{application_id}\"</code></pre>  <h2>Path Parameter</h2><p>The following path parameter forms part of the endpoint URL string:</p>     <ul><li><strong>trading_pair_type:</strong> The trading pair type specifies the type of the trading pairs in the batch, i.e. stock or crypto pairs. Mixing different trading pair types in the same batch is not supported. The parameter needs to be set to one of the following two values: '<em>stock</em>' or '<em>crypto</em>'.</li> </ul> <h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li> <li><strong>Content-Type:</strong> application/json</li>         </ul><h2>Body</h2><p>The request body must be a JSON object formatted as shown below, with keys representing trading pairs and their corresponding data arrays.</p>      <pre class=\"centre\"><code>{\n  \"BTC_USD\": {\n    \"open_time\": [1732687200, 1732665600, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  \"another-trading-pair\": {\n    \"open_time\": [1732687200, 1732665600, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  ...\n}</code></pre><p> Since the route supports batching, more than one trading pair along with its data can be sent to the endpoint simultaneously.</p><h3>Specifications</h3>     <ul><li><strong>Trading Pair:</strong> The market symbol for the data (e.g., BTC_USD). Ensure the two currencies are seperated by an underscore and not a forward slash.</li><li><strong>Number of Data Points:</strong> For each trading pair, the endpoint requires <em>84</em> data points.</li><li><strong>Open Time:</strong> The <code>open_time</code> data array requires the open time of the candlestick as a Unix formatted timestamp in seconds.</li><li><strong>Interval:</strong> Data points must be spaced <em>six (6) hours</em> apart. For stock data, where markets are not open 24/7, provide the first available data point after the six-hour interval.</li></ul> <h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the input data adheres to the specifications.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n  \"success\": true,\n  \"msg\": \"Generated indicator(s) successfully\",\n  \"msgType\": \"Success\",\n  \"records\": [\n    {\n      \"trading_pair\": \"BTC_USD\",\n      \"indicator\": {\n        \"trading_type\": \"Long\",\n        \"leverage\": 1,\n        \"buy_price\": 74305.44,\n        \"sell_price\": 74963.80332178116,\n        \"buy_date\": \"2024-11-27T16:00:00\",\n        \"sell_prediction_date\": \"2024-11-28T04:00:00\",\n        \"risk\": 8,\n        \"market_direction\": \"Bear\",\n        \"percentage_change\": 0.8860230445861816,\n        \"stoploss\": 1,\n        \"trading_type_24h\": \"Long\",\n        \"percentage_change_24h\": 0.08165836334228516,\n        \"risk_24h\": 9,\n        \"leverage_24h\": 1,\n        \"stoploss_24h\": 1\n      }\n    }\n  ]\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Trading pair - replace this value with your own\ntrading_pair_type: str = \"crypto\"  # or \"stock\"\n\n# Constructing the request URL\nrequest_url: str = (\n    f\"{BASE_URL}/v1/trading_pairs/{trading_pair_type}/generate_indicators\"\n)\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = (\n    f\"{trading_pair_type}{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n)\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n# Prepare the trading history data according to the specifications\ntrading_history_data = {\n    \"BTC_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732651200],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n    \"ETH_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732651200],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n}\n\n# Making a POST request to the API endpoint\nresponse = requests.post(\n    url=request_url,\n    headers=request_headers,\n    json=trading_history_data,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Handling the response\nif response_success and response_records:\n    # Printing the generated indicator for each trading pair\n    for record in response_records:\n        print(f\"Trading Pair: {record['trading_pair']}\")\n        print(f\"Generated Indicator: {record['indicator']}\")\nelse:\n    print(f\"Response Message: {response_msg}\")\n</code></pre>",
  "docs_nav_tree.api_documentation.v1.endpoints.get_market_direction.name": "Get Market Direction",
  "docs_nav_tree.api_documentation.v1.endpoints.get-market-direction.content": "<h1>Get Market Direction</h1>   <p><mark><b>POST</b> &rarr; /v1/trading_pairs/market_direction</mark></p>   <p>Calculates the market direction based on the trading history data provided.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre>   <h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li> <li><strong>Content-Type:</strong> application/json</li>         </ul><h2>Body</h2>The body of the request should be a JSON object with the same structure as the following:      <pre class=\"centre\"><code>{\n  \"BTC_USD\": {\n    \"open\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  \"another-trading-pair\": {\n    \"open\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  ...\n}</code></pre><p> Since the route supports batching, more than one trading pair can be sent to the endpoint at once.</p><h3>Specifications</h3>     <ul><li><strong>Trading Pair:</strong> The market symbol for the data (e.g., BTC_USD). Ensure the two currencies are seperated by an underscore and not a forward slash.</li><li><strong>Open:</strong> The <code>open</code> data array requires the open price of the candlestick. This is different from our other endpoints which have distinct <code>open_time</code> and <code>open_price</code> data arrays.</li><li><strong>Number of Data Points:</strong> For each trading pair, it is recommended to provide at least <em>20</em> data points.</li></ul> <h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the input data adheres to the specifications.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n    \"success\": true,\n    \"msg\": \"Calculated market direction based on provided data.\",\n    \"msgType\": \"Success\",\n    \"records\": [\n        {\n            \"currency\": \"BTC_USD\",\n            \"market_direction\": \"Bear\"\n        },\n        {\n            \"currency\": \"ETH_USD\",\n            \"market_direction\": \"Bull\"\n        }\n    ]\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/trading_pairs/market_direction\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = (\n    f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n)\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n# Prepare the trading history data according to the specifications\ntrading_history_data = {\n    \"BTC_USD\": {\n        \"open\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n    \"ETH_USD\": {\n        \"open\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n}\n\n# Making a POST request to the API endpoint\nresponse = requests.post(\n    url=request_url,\n    headers=request_headers,\n    json=trading_history_data,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Handling the response\nif response_success and response_records:\n    # Process the response records\n    for record in response_records:\n        # Extract the trading pair and the generated market direction\n        trading_pair = record[\"currency\"]\n        market_direction = record[\"market_direction\"]\n\n        # Print the trading pair and the generated market direction\n        print(f\"{trading_pair} - Market Direction: {market_direction}\")\nelse:\n    print(f\"Response Message: {response_msg}\")\n</code></pre>",
  "docs_nav_tree.api_documentation.v1.endpoints.create_custom_data_scaler.name": "Create Custom Data Scaler",
  "docs_nav_tree.api_documentation.v1.endpoints.create-custom-data-scaler.content": "<h1>Create Custom Data Scaler</h1>   <p><mark><b>POST</b> &rarr; /v1/custom/data_scaler/register</mark></p>   <p>Create your own custom data scalers to be used with the MarketRaker AI model by sending historical trading data.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre><h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li> <li><strong>Content-Type:</strong> application/json</li>         </ul><h2>Body</h2><p>The request body must be a JSON object formatted as shown below, with keys representing trading pairs and their corresponding data arrays.</p>      <pre class=\"centre\"><code>{\n  \"MY_BTC_USD\": {\n    \"open_time\": [1732687200, 1732644000, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  \"another-custom-pair\": {\n    \"open_time\": [1732687200, 1732644000, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  ...\n}</code></pre><p> Since the route supports batching, more than one trading pair along with its data can be sent to the endpoint simultaneously. Note however, that should one trading pair fail to create a data scaler, the entire HTTP request will fail.</p><h3>Specifications</h3>     <ul><li><strong>Trading Pair:</strong> The market symbol for the data. The format dependends on how you want to reference it.</li><li><strong>Number of Data Points:</strong>Each trading pair requires a minimum of <em>200</em> data points to generate a data scaler. While there is no strict upper limit on the number of data points, providing more data may improve the accuracy of the scaler although this is not guaranteed.</li><li><strong>Open Time:</strong> The <code>open_time</code> data array requires the open time of the candlestick as a Unix formatted timestamp in seconds.</li><li><strong>Interval:</strong> Data points must be spaced <em>12 hours</em> apart. For stock data, where markets are not open 24/7, provide the first available data point after the 12-hour interval.</li></ul> <h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the input data adheres to the specifications.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n \"success\": true,\n \"msg\": \"Custom data scaler(s) registered successfully.\",\n \"msgType\": \"Success\",\n \"records\": []\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/custom/data_scaler/register\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n# Prepare the trading history data according to the specifications\ntrading_history_data = {\n    \"BTC_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732644000],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n    \"ETH_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732644000],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n}\n\n# Make a POST request to the API endpoint\nresponse = requests.post(\n    url=request_url,\n    headers=request_headers,\n    json=trading_history_data,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Printing the response\nprint(f\"Response: {response_msgType} - {response_msg}\")\n</code></pre>",
  "docs_nav_tree.api_documentation.v1.endpoints.generate_indicators_with_custom_data_scalers.name": "Generate Indicators with Custom Data Scalers",
  "docs_nav_tree.api_documentation.v1.endpoints.generate-indicators-with-custom-data-scalers.content": "<h1>Generate Indicators with Custom Data Scalers</h1>   <p><mark><b>POST</b> &rarr; /v1/custom/data_scaler/generate_indicators</mark></p>   <p>Generate trading indicators for trading pairs using your own custom data scalers which you <a href=\"#/docs/api-documentation/v1/endpoints/create-custom-data-scaler\">created</a> by sending historical trading data for each.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre><h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li> <li><strong>Content-Type:</strong> application/json</li>         </ul><h2>Body</h2><p>The request body must be a JSON object formatted as shown below, with keys representing trading pairs and their corresponding data arrays.</p>      <pre class=\"centre\"><code>{\n  \"BTC_USD\": {\n    \"open_time\": [1732687200, 1732665600, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  \"another-trading-pair\": {\n    \"open_time\": [1732687200, 1732665600, ...],\n    \"open_price\": [92768.01, 91965.16, ...],\n    \"close\": [92812.35, 92047.99, ...],\n    \"high\": [92880.0, 92048.0, ...],\n    \"low\": [92768.01, 91961.22, ...],\n    \"volume\": [69.68558, 25.60848, ...]\n  },\n  ...\n}</code></pre><p> Since the route supports batching, more than one trading pair along with its data can be sent to the endpoint simultaneously.</p><h3>Specifications</h3>     <ul><li><strong>Trading Pair:</strong> The market symbol for the data. The format is dependent on how it was created. <a href=\"#/docs/api-documentation/v1/endpoints/get-custom-data-scalers\">(Obtain a list of your custom data scalers.)</a></li><li><strong>Number of Data Points:</strong> For each trading pair, the endpoint requires <em>84</em> data points.</li><li><strong>Open Time:</strong> The <code>open_time</code> data array requires the open time of the candlestick as a Unix formatted timestamp in seconds.</li><li><strong>Interval:</strong> Data points must be spaced <em>six (6) hours</em> apart. For stock data, where markets are not open 24/7, provide the first available data point after the six-hour interval.</li></ul> <h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the input data adheres to the specifications.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n \"success\": true,\n \"msg\": \"Generated indicator(s) successfully\",\n \"msgType\": \"Success\",\n \"records\": [\n   {\n     \"trading_pair\": \"MY_BTC_USD\",\n     \"indicator\": {\n       \"trading_type\": \"Long\",\n       \"leverage\": 1,\n       \"buy_price\": 74305.44,\n       \"sell_price\": 75040.3975719452,\n       \"buy_date\": \"2024-11-27T16:00:00\",\n       \"sell_prediction_date\": \"2024-11-28T04:00:00\",\n       \"risk\": 8,\n       \"market_direction\": \"Bear\",\n       \"percentage_change\": 0.9891033172607422,\n       \"stoploss\": 1,\n       \"trading_type_24h\": \"Long\",\n       \"percentage_change_24h\": 0.6705403327941895,\n       \"risk_24h\": 9,\n       \"leverage_24h\": 1,\n       \"stoploss_24h\": 1\n     }\n   }\n ]\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/custom/data_scaler/generate_indicators\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n# Prepare the trading history data according to the specifications\ntrading_history_data = {\n    \"MY_BTC_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732651200],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n    \"MY_ETH_USD\": {\n        \"open_time\": [1732687200, 1732665600, 1732651200],\n        \"open_price\": [92768.01, 91965.16, 93547.99],\n        \"close\": [92812.35, 92047.99, 92119.99],\n        \"high\": [92880.0, 92048.0, 93632.0],\n        \"low\": [92768.01, 91961.22, 92000.0],\n        \"volume\": [69.68558, 25.60848, 2396.5828],\n    },\n}\n\n# Making a POST request to the API endpoint\nresponse = requests.post(\n    url=request_url,\n    headers=request_headers,\n    json=trading_history_data,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Handling the response\nif response_success and response_records:\n    # Printing the generated indicator for each trading pair\n    for record in response_records:\n        print(f\"Trading Pair: {record['trading_pair']}\")\n        print(f\"Generated Indicator: {record['indicator']}\")\nelse:\n    print(f\"Response Message: {response_msg}\")\n</code></pre>",
  "docs_nav_tree.api_documentation.v1.endpoints.get_custom_data_scalers.name": "Get Custom Data Scalers",
  "docs_nav_tree.api_documentation.v1.endpoints.get-custom-data-scalers.content": "<h1>Get Custom Data Scalers</h1>   <p><mark><b>GET</b> &rarr; /v1/custom/data_scaler/all</mark></p>   <p>Retrieve a list with all the custom data scalers registered to your application ID.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre> <h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li>  </ul><h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback. Ensure that the path parameters are valid.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n \"success\": true,\n \"msg\": \"Custom data scalers retrieved successfully.\",\n \"msgType\": \"Success\",\n \"records\": [\n   {\n     \"scaler_trading_pair\": \"MY_BTC_USD\"\n   },\n   {\n     \"scaler_trading_pair\": \"MY_ETH_USD\"\n   }\n ]\n}</code></pre><i><p>Only the data scaler identifier (scaler_trading_pair) is returned in the response at the moment. Please note that this is subject to change without prior notice. As such, it is recommended to implement robust handling for the response to accommodate potential future additions to the response records.</p></i><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/custom/data_scaler/all\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n    \"Content-Type\": \"application/json\",\n}\n\n\n# Making a GET request to the API endpoint\nresponse = requests.get(\n    url=request_url,\n    headers=request_headers,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\nprint(response_json)\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Extract a list of trading pairs from the response\ntrading_pairs = []\nfor record in response_records:\n    trading_pairs.append(record[\"scaler_trading_pair\"])\n\n# Printing the response\nprint(f\"Response: {response_msgType} - {response_msg}\")\nprint(f\"Trading Pairs: {trading_pairs}\")\n</code></pre>",
  "docs_nav_tree.api_documentation.v1.endpoints.delete_custom_data_scaler.name": "Delete Custom Data Scaler",
  "docs_nav_tree.api_documentation.v1.endpoints.delete-custom-data-scaler.content": "<h1>Delete Custom Data Scaler</h1>   <p><mark><b>DELETE</b> &rarr; /v1/custom/data_scaler/delete</mark></p>   <p>Delete custom data scalers registered to your application ID.</p>   <p><strong>API credit cost:</strong><br><i>(please refer to the <a href=\"#/docs/api-documentation/v1/overview\">Overview</a> page).</i></p><strong>Signing string template:</strong><br>  <pre class=\"centre\"><code>string_to_sign = f\"{current_unix_timestamp_seconds}{application_id}\"</code></pre>  <h2>Query Parameter</h2><p>The following query parameter needs to be sent alongside the HTTP request:</p>     <ul><li><strong>trading_pair:</strong> The trading pair for which you want to delete the custom data scaler.</li></ul> <h2>Headers</h2><p>The following headers need to be included in your request:</p>     <ul><li><strong>X-Signature:</strong> The <a href=\"#/docs/api-documentation/v1/generating-signature\">signature generated</a> using the signing string template provided above.</li>        <li><strong>X-Signature-Timestamp:</strong> The current Unix timestamp in seconds.</li>       <li><strong>Application-Id:</strong> Your unique application ID. <a href=\"#/docs/api-documentation/v1/getting-started\">(Where do I get this?)</a></li>  </ul><h2>Response</h2><p>The API will return a JSON response that includes a 'success' flag, 'msg', 'msgType', and 'records'. If the 'success' flag is false, the HTTP status code along with the message will provide suitable feedback.</p><h3>Example Response</h3>A typical successful response will look as follows: <pre class=\"centre\"><code>{\n \"success\": true,\n \"msg\": \"Custom data scaler deleted successfully.\",\n \"msgType\": \"Success\",\n \"records\": []\n}</code></pre><h2>Example Code</h2><p>Below is a sample Python script for making a request to this endpoint. It uses version 1.5.0 of the <a href='https://pynacl.readthedocs.io/en/1.0.1/signing/'>PyNaCl library</a> and version 2.31.0 of the <a href='https://requests.readthedocs.io/en/latest/'>Requests library</a>.</p><pre><code class=\"python\">from datetime import datetime, timezone\nfrom nacl.encoding import HexEncoder\nfrom nacl.signing import SigningKey\nimport requests\n\n# Declare your signing key and application ID - replace these values with your own\nSIGNING_KEY = \"6163210a5115853f6fdfe7bf7bb1d26c8652f343fe3a3c072b2b706f0d1b9c56\"\nAPPLICATION_ID = \"e91523761f929ed7d1ea2f830fe2aec9\"\n\n# API base URL\nBASE_URL = \"https://api.raker.market\"\n\n# Constructing the request URL\nrequest_url: str = f\"{BASE_URL}/v1/custom/data_scaler/delete\"\n\n# Current Unix timestamp\ncurrent_unix_timestamp_seconds: int = int(datetime.now(timezone.utc).timestamp())\n\n# Concatenating the string to be signed\nstring_to_sign: str = f\"{current_unix_timestamp_seconds}{APPLICATION_ID}\"\n\n# Sign the string using the signing key\nsigning_key = SigningKey(SIGNING_KEY, encoder=HexEncoder)\nsignature: str = signing_key.sign(\n    string_to_sign.encode(), encoder=HexEncoder\n).signature.decode()\n\n# Preparing request headers\nrequest_headers = {\n    \"X-Signature\": signature,\n    \"X-Signature-Timestamp\": str(current_unix_timestamp_seconds),\n    \"X-Application-Id\": APPLICATION_ID,\n}\n\n# Prepare the request parameter\nrequest_param = {\"trading_pair\": \"MY_BTC_USD\"}\n\n# Making a DELETE request to the API endpoint\nresponse = requests.delete(\n    url=request_url,\n    headers=request_headers,\n    params=request_param,\n)\n\n# Parsing the response to JSON\nresponse_json = response.json()\n\n# Extracting response data\nMSG_TYPES = [\"Success\", \"Error\", \"Warning\", \"Notice\"]\n\nresponse_success: bool = response_json[\"success\"]\nresponse_msg: str = response_json[\"msg\"]\nresponse_msgType: str = response_json[\"msgType\"]\nresponse_records: list[dict] = response_json[\"records\"]\n\n# Printing the response\nprint(f\"Response: {response_msgType} - {response_msg}\")\n</code></pre>",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.name":"API Webhook Indicators",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.webhook-overview.name":"Overview",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.webhook-overview.content":"<h1>Overview</h1>\n<p>\n  The API URL integration allows you to register a webhook with MarketRaker's own API.<br>  When registering a webhook, trading indicators will be sent to this endpoint as a JSON object. See Indicator Example for more details regarding this.<br>  We also provide a way for you to verify the authenticity of the indicator via a signature. Please see Verifying Indicators for details.\n</p><strong>What are Webhooks?</strong>\n<p>A webhook is an HTTP-based callback that allows MarketRaker's API to send real-time data to your application as soon as an indicator is generated. Unlike traditional polling mechanisms that periodically request data, webhooks are event-driven, meaning that our API pushes the notification to your application when a new indicator is generated.</p><strong>Integration Example:</strong><br><p>For an example of how to integrate your trading bot with our webhook service, see our: <a href='https://github.com/MarketRaker/trading-bot-example-code'>GitHub example</a></p>",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.verifying-indicators.name":"Verifying Indicators",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.verifying-indicators.content":"<h1>Verifying an API webhook indicator</h1>\n<p>\n We have implemented an optional security feature that you can use to ensure the authenticity of the trading indicators received by your webhook. We have signed the request body using RSA. You can retrieve this signature by accessing the 'X-Signature' header of the HTTP request.<br><pre><code>headers:<br>  content-type: application/json<br>  x-signature: KcjizsHo ... pFVgQ==</code></pre><br><strong>Verifying the signature will provide the following assurances:</strong><br><ol><li>  The trading indicator was indeed sent by MarketRaker.</li><li>  The trading indicator was not modified or altered in any way after we sent the HTTP request to you.</li></ol> To authenticate your API webhook indicators, verify the x-signature found in the header of the indicator using your verification key. This ensures the indicator's authenticity and integrity.\n</p>\n<ol>\n  <li>\n    <strong>Items needed for verification:</strong>\n    <ul>\n      <li>Relevant payload as a JSON .</li>\n      <li>The base64 encoded signature to verify found in the indicator's header.</li>\n      <li>Your PEM formatted verification key.</li>\n    </ul>\n  </li>\n  <li>\n    <strong>Example:</strong> Below is an example of a function that can be used to verify indicators:\n  <pre><code>from cryptography.hazmat.primitives import serialization, hashes<br>from cryptography.hazmat.primitives.asymmetric import padding<br>from cryptography.hazmat.backends import default_backend<br>from cryptography.exceptions import InvalidSignature<br>import base64<br>import json<br><br>def verify_signature(payload: json, signature: str, public_key_str: str)-> bool:<br>    '''<br>    Verifies the signature of a payload.<br><br>    Parameters:<br>    - payload (json): The payload that was signed.<br>    - signature (str): The base64 encoded signature to verify.<br>    - public_key_str (str): The PEM formatted public key string.<br><br>    Returns:<br>    - bool: True if the signature is valid, False otherwise.<br>    '''<br>    try:<br>        payload_bytes: bytes = payload.encode('utf-8')<br>        signature_bytes: bytes = base64.b64decode(signature.encode('utf-8'))<br><br>        public_key = serialization.load_pem_public_key(<br>            public_key_str.encode('utf-8'), backend=default_backend()<br>        )<br><br>        public_key.verify(<br>            signature_bytes,<br>            payload_bytes,<br>            padding.PSS(<br>                mgf=padding.MGF1(hashes.SHA256()),<br>                salt_length=padding.PSS.MAX_LENGTH,<br>            ),<br>            hashes.SHA256(),<br>        )<br>        return True<br>    except InvalidSignature:<br>        return False<br>    except Exception as e:<br>        print(f'An error occurred during signature verification: {e}')<br>        return False</code></pre>\n  </li>\n  \n</ol>",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.receiving-indicators.name":"Receiving Indicators",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.receiving-indicators.content":"<h1>Receiving an API webhook indicator</h1>\n<p>\n  To receive your API webhook indicators, you can make a simple webhook endpoint.\n</p>\n<ol>\n  <li>\n    <strong>Items needed for receiving indicators:</strong>\n    <ul>\n      <li>A registered and active webhook.</li>\n      <li>At least 10 000 raker tokens.</li>\n    </ul>\n  </li>\n  <li>\n    <strong>Example:</strong> Below is an example of how to receive an indicator:\n  <pre><code>from fastapi import Request, HTTPException<br><br>async def webhook_endpoint(request: Request):<br>    try:<br><br>        payload:dict = await request.json()<br>        return payload<br><br>    except Exception as e:<br>        print(f'Error processing webhook: {e}')<br>        raise HTTPException(status_code=500, detail='Internal server error')</code></pre>\n  </li>\n  \n</ol>",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.example-indicators.name":"Indicator Example",
  "docs_nav_tree.api_documentation.v1.apiwebhooks.example-indicators.content":"<h1>Example of an API webhook indicator</h1>\n<p>\n  The request body will contain the type of indicator and the relevant attributes which you can extract and use.<br>When a new trading indicator is sent as a notification, we will use your registered webhook URL to send the indicator to you. You will receive an HTTP request similar to the one below.\n</p>\n<ol>\n  <li>\n    <strong>Example:</strong>\n      <pre><code>{<br> 'type': 'indicator',<br> 'data': '{<br>    'trading_type': 'Long',<br>    'leverage': 1,<br>    'buy_price': 205.0,<br>    'sell_price': 215.0,<br>    'buy_date': 1733913000,<br>    'sell_prediction_date': 1733999400,<br>    'risk': 4,<br>    'market_direction': 'Bull',<br>    'percentage_change': 5.1,<br>    'stoploss': 200,<br>    'trading_type_24h': null,<br>    'percentage_change_24h': -1.5,<br>    'risk_24h': 5,<br>    'leverage_24h': 2,<br>    'stoploss_24h': 190,<br>    'trading_pair': 'SOL/USD'<br> }'<br>}</code></pre>\n  </li>\n  \n</ol>",

  "docs_nav_tree.tutorials_incomplete.name": "Tutorials (Incomplete)",
  "docs_nav_tree.tutorials_incomplete.content": "",
  "docs_nav_tree.tutorials_incomplete.setting_up_indicators.name": "Setting Up Indicators",
  "docs_nav_tree.tutorials_incomplete.setting_up_indicators.content": "",
  "docs_nav_tree.tutorials_incomplete.interpreting_ai_insights.name": "Interpreting AI Insights",
  "docs_nav_tree.tutorials_incomplete.interpreting_ai_insights.content": "",
  "docs_nav_tree.tutorials_incomplete.customizing_ai_models.name": "Customizing AI Models",
  "docs_nav_tree.tutorials_incomplete.customizing_ai_models.content": "",
  "docs_nav_tree.tutorials_incomplete.integration_with_trading_platforms.name": "Integration with Trading Platforms",
  "docs_nav_tree.tutorials_incomplete.integration_with_trading_platforms.content": "",
  "docs_nav_tree.tutorials_incomplete.setting_up_alerts.name": "Setting Up Alerts",
  "docs_nav_tree.tutorials_incomplete.setting_up_alerts.content": "",

  "docs_nav_tree.tutorials.name": "Tutorials",
  "docs_nav_tree.tutorials.onboarding.name": "Onboarding",
  "docs_nav_tree.tutorials.onboarding.content": "<h1>Onboarding Video Tutorial</h1>\n<p>Below is a video taking you through our onboarding process to create your MarketRaker account and linking your wallet.</p><iframe src=\"https://www.youtube.com/embed/y6pIeElfub8?si=tyPN_WKstYVOptTQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>",

  "docs_nav_tree.references.name": "References",
  "docs_nav_tree.references.faqs.name": "FAQs",
  "docs_nav_tree.references.api_documentation.name": "API Documentation",
  "docs_nav_tree.references.glossary.name": "Glossary",
  "docs_nav_tree.references.glossary.content": "<div><h2>Glossary of Terms:</h2><ul><li><strong>MarketRaker AI:</strong> A platform focused on stock picking and prediction of prices through sophisticated algorithms and data analysis.</li><li><strong>RAKER:</strong> The native token of MarketRaker AI, used as a subscription model to access the platform's tools and services.</li><li><strong>Stock Picking:</strong> The process of selecting stocks that are expected to perform better than the market.</li><li><strong>Random Walk:</strong> A theory suggesting that stock price changes have the same distribution and are independent of each other.</li><li><strong>TradingView:</strong> A platform for traders to view and analyze market data.</li><li><strong>Technical Indicators:</strong> Mathematical calculations based on historical price, volume, or open interest information aiming to forecast financial market direction.</li><li><strong>Ehler’s Auto-correlation:</strong> A technical indicator used to analyze market trends.</li><li><strong>Gini Coefficient:</strong> A measure of statistical dispersion representing the income distribution of a nation's residents.</li><li><strong>TCN (Temporal Convolutional Network):</strong> A neural network used for sequence modeling tasks.</li><li><strong>LSTM:</strong> Long Short-Term Memory, a type of recurrent neural network architecture.</li><li><strong>RNN:</strong> Recurrent Neural Network, a class of artificial neural networks.</li><li><strong>Keras:</strong> An open-source software library providing a Python interface for artificial neural networks.</li><li><strong>Adam Optimiser:</strong> A method for stochastic optimization.</li><li><strong>Weights and Biases:</strong> Tools used for machine learning experiment tracking, dataset versioning, and project collaboration.</li><li><strong>Bayesian Optimisation:</strong> A sequential design strategy for global optimization of black-box functions.</li><li><strong>Webhooks:</strong> Automated messages sent from apps when something happens, often used to integrate third-party tools.</li><li><strong>Trading Bots:</strong> Automated systems that can execute trades on behalf of a trader based on a predefined strategy.</li><li><strong>Receptive Field:</strong> The space in the input data taken by a neural network to produce a particular output.</li><li><strong>Residual Block:</strong> A component in neural networks that helps in solving the problem of vanishing gradients by introducing skip connections.</li><li><strong>Hyperparameter:</strong> A parameter whose value is set before training a machine learning model, as opposed to values that are derived via training.</li></ul></div>",

  "docs_nav_tree.community_support.name": "Community & Support",
  "docs_nav_tree.community_support.rules.content": "<p><strong>MarketRaker AI Community Rules & Guidelines</strong></p><p>Welcome to the MarketRaker AI community! Please adhere to the following rules:</p><ol><li><strong>Respect Everyone</strong>: Avoid derogatory language and harassment.</li><li><strong>Stay On Topic</strong>: Ensure discussions are relevant to MarketRaker AI.</li><li><strong>No Spam</strong>: Avoid repetitive messages or irrelevant links.</li><li><strong>No Financial Advice</strong>: All discussions are for informational purposes only.</li><li><strong>Avoid FUD & Hype</strong>: Remain objective and factual.</li><li><strong>Respect Privacy</strong>: Do not share or request personal information.</li><li><strong>Beware of Scams</strong>: We will <em>never</em> ask for personal details or funds. Always be cautious of impersonators.</li><li><strong>Report Suspicious Behavior</strong>: Report any unusual activity to moderators.</li><li><strong>Constructive Feedback</strong>: Present suggestions constructively.</li><li><strong>Adherence to Rules</strong>: Violation of these rules may result in bans.</li></ol><p>Stay safe and collaborate positively in the MarketRaker AI community.</p>",
  "docs_nav_tree.community_support.join_our_discord.name": "Join our Discord",
  "docs_nav_tree.community_support.join_our_discord.content": "<p>Welcome to the official <strong><a target=\"_blank\" href=\"https://discord.gg/Rk6jYHJnXu\">MarketRaker AI Discord Channel</a></strong>.</p><p>Upon joining, all members will have access to channels such as white paper, announcements, and general chat. This is where you can connect with the community and stay updated on MarketRaker AI's developments.</p><p>Members with a valid MarketRaker AI subscription will be granted an additional role, giving them access to exclusive channels. This includes areas for notifications, results, and more specialized discussions.</p><p>For a seamless integration with our community and to maximize your MarketRaker AI experience, <strong><a href=\"https://discord.gg/Rk6jYHJnXu\" target=\"_blank\">join our Discord channel</a></strong> today.</p>",
  "docs_nav_tree.community_support.join_telegram.name": "Join our Telegram",
  "docs_nav_tree.community_support.join_telegram.content": "<p>Our <strong><a href=\"https://t.me/+r_BIiKvMqbZmMjBk\">Telegram channel</a></strong> remains open for everyone to join. However, we're transitioning most of our communications to Discord for enhanced interactions and updates. To ensure you stay updated and don't miss any crucial announcements, please <strong><a href=\"https://discord.gg/Rk6jYHJnXu\">join our Discord channel</a></strong>.</p>",
  "docs_nav_tree.community_support.contact_support.name": "Contact Support",
  "docs_nav_tree.community_support.contact_support.content": "<p>For support, please reach out to us on <strong><a target=\"_blank\" href=\"https://discord.gg/Rk6jYHJnXu\">Discord</a></strong> or send an email to <a href=\"mailto:support@raker.market\">support@raker.market</a>. We strive to respond to all inquiries, but kindly ensure your queries are relevant to assist us in serving you better.</p>",

  "docs_nav_tree.legal.privacy_policy.name": "Privacy Policy",
  "docs_nav_tree.legal.privacy_policy.content": "<div class=\"terms\"><div class=\"terms-heading\"><h1 class=\"document-heading\">Privacy Policy</h1></div><div class=\"terms-body\"><p class=\"document-textA\"> At Raker.Market, we respect and protect the privacy of our users. This Privacy Policy explains how we collect, use, and protect your personal information when you use our website and services.</p><h2 class=\"content-heading\">Information We Collect</h2><p class=\"document-textA\"> When you use our website, we may collect certain information about you, including:</p><ul class=\"document-list\"><li class=\"document-list\"> Personal information such as your name, email address, and other contact details that you provide when you sign up for our services or contact us for support;</li><li class=\"document-list\"> Technical information such as your IP address, browser type, and operating system, which is automatically collected by our web server and analytics tools;</li><li class=\"document-list\"> Usage information such as the pages you visit, the time and date of your visits, and the amount of time you spend on our website, which is collected by our analytics tools.</li></ul><h2 class=\"content-heading\">How We Use Your Information</h2><p class=\"document-textA\"> We may use your personal and technical information to:</p><ul class=\"document-list\"><li class=\"document-list\"> Provide and improve our services to you;</li><li class=\"document-list\"> Respond to your inquiries, comments, and support requests;</li><li class=\"document-list\"> Analyze and monitor usage trends and patterns on our website;</li><li class=\"document-list\"> Comply with applicable laws, regulations, and legal processes.</li></ul><h2 class=\"content-note\">We do not sell, rent, or lease your personal information to third parties.</h2><h2 class=\"content-heading\">Cookies and Other Tracking Technologies </h2><p class=\"document-text\"> We use cookies and other tracking technologies to collect and store certain information about your use of our website. Cookies are small text files that are stored on your device when you visit a website. They are used to remember your preferences and enable certain features of our website. You can control cookies and other tracking technologies through your browser settings. However, disabling cookies may affect your ability to use certain features of our website.</p><h2 class=\"content-heading\">Data Security </h2><p class=\"document-text\"> We take reasonable measures to protect the security of your personal information, including using encryption technologies and access controls to prevent unauthorized access, use, or disclosure of your information. However, no data transmission over the internet or storage system can be guaranteed to be 100% secure. Therefore, we cannot guarantee the absolute security of your personal information.</p><h2 class=\"content-heading\">Changes to this Privacy Policy</h2><p class=\"document-text\">  We may update this Privacy Policy from time to time. We will notify you of any material changes to this policy by posting a notice on our website or by sending you an email.</p><h2 class=\"content-heading\">Contact Us</h2><p class=\"document-text\"> If you have any questions or concerns about this Privacy Policy or our data practices, please contact us at <a href=\"support@raker.market\">support@raker.market</a>.</p></div></div>",
  "docs_nav_tree.legal.terms_of_use.name": "Terms of Use",
  "docs_nav_tree.legal.terms_of_use.content": "<div class=\"terms\"><div class=\"terms-heading\"><h1 class=\"document-heading\">Terms of Use</h1></div><div class=\"terms-body\"><p class=\"document-textA\"> Welcome to MarketRaker AI, a tool that provides trading indicators and insights for various markets. By using our website and services, you agree to be bound by these terms of use. Please read them carefully before using our website or services.</p><h2 class=\"content-heading\">Disclaimer</h2><p class=\"document-text\"> MarketRaker AI is not a financial advisor and does not provide investment advice. Our services are intended to provide information and trading indicators for educational and informational purposes only. It is essential to understand that using our services and indicators does not guarantee any particular investment results and that all trading involves risk.</p><h2 class=\"content-heading\">Using our Services</h2><p class=\"document-text\"> By using our website and services, you agree that you will not use them for illegal, unauthorized, or improper purposes. You agree that you will use our services solely for your personal, non-commercial use and will not share your account or login credentials with any third parties. You agree that you will not attempt to reverse engineer, decompile, or disassemble any of our software or services. You also agree that you will not use automated systems or bots to access or use our services.</p><h2 class=\"content-heading\"> Indemnification</h2><p class=\"document-text\"> You agree to indemnify, defend, and hold harmless MarketRaker AI, its affiliates, officers, directors, employees, agents, licensors, and suppliers from any claims, liabilities, damages, or expenses (including attorneys' fees) arising out of your use of our website or services, your violation of these terms of use, or your violation of any rights of another.</p><h2 class=\"content-heading\"> Limitation of Liability</h2><p class=\"document-text\"> To the fullest extent permitted by law, MarketRaker AI, its affiliates, officers, directors, employees, agents, licensors, and suppliers shall not be liable for any direct, indirect, punitive, incidental, special, or consequential damages arising out of or in any way connected with the use of our website or services, whether based on contract, tort, strict liability, or any other theory of liability, even if MarketRaker AI has been advised of the possibility of such damages.</p><h2 class=\"content-heading\"> RAKER Token Grant for Early Adopters </h2><p class=\"document-text\"> The RAKER Token Grant offers an initial 10 RAKER tokens, with the potential to receive up to 1000 tokens, as a special incentive for early supporters of MarketRaker AI. We've set this in place to acknowledge and reward our early community members. However, we urge members to use this grant responsibly and in the spirit it's intended. <br><br> To maintain the integrity of this grant and ensure it reaches genuine users, we require all participants to log into the MarketRaker AI app and complete verification before tokens are disbursed.</p><br><br><p class=\"document-text\"><b>Examples of Valid Use Cases:</b></p><ul class=\"document-text\"><li class=\"document-text\">Transferring the grant to a friend's wallet that displays other active transactions.</li><li class=\"document-text\">Purchasing tokens directly from MinSwap.</li></ul><p class=\"document-text\"><b>Examples of Invalid Use Cases:</b></p><ul><li class=\"document-text\">Wallets with only a single transaction of 10 tokens intended for the airdrop will be considered suspicious and may be flagged for review.</li></ul><p class=\"document-text\"><br>Please note: MarketRaker AI holds the authority to withhold or retrieve tokens from accounts that breach these terms.</p><h2 class=\"content-heading\"> Changes to Terms of Use </h2><p class=\"document-text\"> We reserve the right to modify or update these terms of use without prior notice. Your continued use of our website or services after any such changes constitutes your acceptance of the new terms of use. Governing Law and Jurisdiction These terms of use shall be governed by and construed following the laws of the jurisdiction in which MarketRaker AI is based. Any legal action or proceeding arising out of or relating to these terms of use shall be brought exclusively in the courts of that jurisdiction.</p><h2 class=\"content-heading\">Contact Us </h2><p class=\"document-text\"> If you have any questions or concerns about these terms of use, please get in touch with us at <a href=\"support@raker.market\">support@raker.market</a>.</p></div></div>",

  "docs_nav_tree.not_found": "<h1>404 Not found</h1><p>This documentation page seems to still be under construction. Please try another documentation resource.</p>",

  "docs_nav_tree.market_direction_api": "<h1>Get Market Direction</h1><p><mark><b>POST</b> &rarr; /model/market-direction</mark></p><p>Calculates the market direction based on the intraday data provided.</p><p><i>Credit cost: 1 credit</i></p><h4>Parameters:</h4><table><tr><th>Name</th><th>Type</th><th>Req.</th><th>Description</th></tr><tr><td>X-Application-Id<p><code><i>(header)</i></code></p></td><td>STRING</td><td>YES</td><td>Your MarketRaker Application ID, go to the <a href=\"https://raker.market/#/api-instructions\" target=\"_blank\">API instructions</a> for an implementation example.</td></tr><tr><td>X-Signature<p><code><i>(header)</i></code></p></td><td>STRING</td><td>YES</td><td>The signature as obtained your public key, go to the <a href=\"https://raker.market/#/api-instructions\" target=\"_blank\">API instructions</a> for an implementation example.</td></tr><tr><td>X-Signature-Timestamp<p><code><i>(header)</i></code></p></td><td>STRING</td><td>YES</td><td>The timestamp when the signature was made in UNIX time, go to the <a href=\"https://raker.market/#/api-instructions\" target=\"_blank\">API instructions</a> for an implementation example.</td></tr><tr><td>Data <p><code><i>(body)</i></code></p></td><td>JSON</td><td>YES</td><td>Intraday data necessary for maket direction calculation. It is recommended to have at least 20 datapoints</td></tr></table><h4>Data example:</h4><p>The data JSON object, must be provided in the following format:</p><img src=\"assets\\images\\docs\\market_direction_api\\data_example.png\"><p></p>",

  "docs_nav_tree.about_us": "About Us",

  "docs_nav_tree.terms_and_conditions.name": "Terms and Conditions",

  "docs_nav_tree.privacy_policy.name": "Privacy Policy",

  "docs_nav_tree.release_notes_updates.name": "Release Notes & Updates",
  "docs_nav_tree.release_notes_updates.content": "",

  "docs_nav_tree.white_paper_v1_0.name": "White Paper v1.0",
  "docs_nav_tree.white_paper_v1_0.index": "<img width=600px class=\"logo\" src=\"assets/images/MARKETRAKER_LOGO_RC_WITH_TEXT.png\" /><h3>Introduction</h3><ol><li>Core Idea and Value Proposition</li><li>Harnessing Advanced Technologies</li><li>A Holistic Approach</li><li>Tokenisation as an Enabler</li></ol><h3>Looking Ahead</h3><ol><li>Market Analysis and Problem Statement</li><li>Overview of the trading market</li><li>Challenges faced by traders in the market</li></ol><h3>How MarketRaker AI Addresses These Challenges</h3><ol><li>Competition</li><li>Value MarketRaker AI Brings</li><li>MarketRaker AI results</li></ol><h3>MarketRaker AI Trading Indicators</h3><ol><li>Explanation of MarketRaker AI's Trading Indicators</li><li>How the Indicators Work</li><li>Risk Model: Empowering Informed Trading Decisions</li><li>Benefits of Using MarketRaker AI's Trading Indicators</li></ol><h3>Token and Tokenomics</h3><ol><li>Explanation of the MarketRaker AI token</li><li>Token distribution and allocation</li><li>Addressing the Importance of the MarketRaker AI Token for Subscriptions</li></ol><h3>Roadmap</h3><ol><li>2022 - 2023 - Product building</li><li>Final Quarter of 2023 - Launch</li><li>Product growth 2024</li></ol><h3>Conclusion</h3><ol><li>Summary of MarketRaker AI and its Benefits</li><li>Final thoughts and call to action</li></ol>",
  "docs_nav_tree.white_paper_v1_0.introduction.name": "Introduction",
  "docs_nav_tree.white_paper_v1_0.introduction.content": "<h1>Introduction?</h1><p>We are about to unveil our state-of-the-art platform designed to change the way traders and investors approach market analysis and decision-making. With a focus on delivering quality insights and simplifying investment choices, MarketRaker AI uses the power of artificial intelligence to provide users with a distinct advantage in today's complex trading landscape.</p>",
  "docs_nav_tree.white_paper_v1_0.introduction.core_idea_value_proposition.name": "Core Idea and Value Proposition",
  "docs_nav_tree.white_paper_v1_0.introduction.core_idea_value_proposition.content": "<h1>Core Idea and Value Proposition?</h1><p>At the heart of our project lies a deep commitment to empowering traders and investors with the prompt and up-to-date indicators they need to navigate the financial markets successfully. We understand the challenges faced by traders in deciphering market trends, identifying opportunities, and managing risks. MarketRaker AI is specifically designed to address these challenges and simplify this process for a wide range of markets, including stocks and cryptocurrencies, based on an individual risk appetite. Just as the art of entering the market is crucial, so is the finesse of knowing when to step away. The economic landscape is ever-shifting, influenced by countless variables - geopolitical events, changes in regulation, market sentiment, and more. Traders often ride the high of a successful trade, becoming complacent in their strategy, not realizing that what goes up must inevitably come down.</p>",
  "docs_nav_tree.white_paper_v1_0.introduction.harnessing_advanced_technologies.name": "Harnessing Advanced Technologies",
  "docs_nav_tree.white_paper_v1_0.introduction.harnessing_advanced_technologies.content": "<h1>Harnessing Advanced Technologies?</h1><p>MarketRaker AI utilizes advanced algorithms and machine learning techniques to generate actionable trading indicators. Our models analyse large amounts of data from diverse markets, uncovering patterns and trends that assist users in making informed investment decisions based on price predictions.</p>",
  "docs_nav_tree.white_paper_v1_0.introduction.holistic_approach.name": "A Holistic Approach",
  "docs_nav_tree.white_paper_v1_0.introduction.holistic_approach.content": "<h1>A Holistic Approach?</h1><p>MarketRaker AI takes a holistic approach to cater to the diverse needs of traders and investors. Our platform offers a user-friendly interface and a wide range of indicators, empowering users to tailor their trading experience to their unique requirements.</p>",
  "docs_nav_tree.white_paper_v1_0.introduction.looking_ahead.content": "<h1>Looking ahead?</h1><p>In this white paper, we will delve into the essential characteristics and advantages of MarketRaker AI, providing a detailed overview of our platform's features, functionalities, and technical methods. Join us on this exciting journey as we redefine market analysis and empower traders with the tools they need to succeed. Together, we will unlock new possibilities and revolutionise the way trading is approached in the digital age.</p>",
  "docs_nav_tree.white_paper_v1_0.introduction.looking_ahead.name": "Looking Ahead",
  "docs_nav_tree.white_paper_v1_0.introduction.tokenisation_as_an_enabler.content": "<h1>Tokenisation as an Enabler?</h1><p>While our project incorporates tokenisation, it is important to note that it serves as a means to enhance functionality, accessibility, and engagement within our platform. The MarketRaker AI token enables seamless access to premium features, subscription-based services, and participation in our growing ecosystem. Furthermore, tokens incentivise active user engagement and facilitate frictionless transactions, creating a thriving and interconnected community.</p>",
  "docs_nav_tree.white_paper_v1_0.introduction.tokenisation_as_an_enabler.name": "Tokenisation as an Enabler",

  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.name": "Market Analysis and Problem Statement",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.challenges_faced_by_traders_in_the_market.name": "Challenges faced by traders in the market",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.challenges_faced_by_traders_in_the_market.content": "<h1>Challenges faced by traders in the market</h1><p>Despite the growth and potential of the cryptocurrency and traditional stock markets, traders face several challenges that make it difficult to consistently make profitable trades. Some key challenges include:</p><ul><li>Market volatility: Both cryptocurrency and traditional stock markets are notoriously volatile, with sudden price swings that can be difficult to predict or respond to in real-time.</li><li>Information overload: The sheer volume of news, data, and analysis available on the markets can be overwhelming. This makes it difficult for traders to sift through and identify key trends and signals.</li><li>Time-consuming analysis: Conducting thorough market analysis and research can be a time-consuming and resource-intensive process, particularly for individual traders or small teams.</li><li>Lack of expertise: Successfully navigating the markets requires a deep understanding of financial markets, technical analysis, and trading strategies, which can be a barrier for novice or less experienced traders.</li><li>Risk management: Managing risk is critical for successful trading, but it can be difficult to accurately assess and manage risk in rapidly changing markets.</li></ul><p>MarketRaker AI aims to address these challenges by providing reliable and actionable trading indicators enabling traders to make informed, data-driven decisions and minimise risk.</p>",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.how_marketraker_addresses_these_challenges.name": "How MarketRaker Addresses These Challenges",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.how_marketraker_addresses_these_challenges.content": "<h2>How MarketRaker AI Addresses These Challenges</h2><p>Each of the above-listed challenges are major hurdles for traders in today's dynamic financial markets. MarketRaker AI, however, has been designed to effectively tackle each of these challenges in the following ways, transforming the trading landscape:</p><ul><li><strong>Mitigating Market Volatility:</strong> At the core of MarketRaker AI is a sophisticated AI engine that leverages machine learning techniques to analyze vast amounts of data in real-time. It focuses on meaningful price movements, filtering out market noise, and thereby reducing the impact of market volatility. With MarketRaker AI, sudden price swings become less daunting as the platform provides clear indicators to guide trading decisions.</li><li><strong>Simplifying Information:</strong> The challenge of information overload is addressed by transforming complex market data into intuitive, user-friendly trading indicators. For example based on a certain Risk you have chosen you might only receive 40-80 indicators a year on a given trading pair.  These indicators deliver valuable insights and guide users towards potential trading opportunities, simplifying the decision-making process.</li><li><strong>Efficient Market Analysis:</strong> MarketRaker AI significantly reduces the time and effort required for market analysis. Our platform frees up traders to focus on strategizing rather than data crunching.</li><li><strong>Accessible Expertise:</strong> We believe that everyone should have access to expert trading tools. This is  why MarketRaker AI has been designed with an intuitive interface catering to both novice and expert traders.</li><li><strong>Tailored Risk Management:</strong> Risk management is a crucial aspect of trading. Our platform allows users to customize their indicators according to their desired risk level and investment goals. This empowers individuals to take charge of their risk management, tailoring their trading strategies to align with their specific risk tolerance.</li></ul><p>In essence, MarketRaker AI transforms the challenges of the trading market into opportunities. It empowers traders with powerful tools, real-time insights, and the flexibility to adapt to market changes effectively and efficiently. With MarketRaker AI, traders can be better equipped to navigate the intricate world of financial markets and make more informed trading decisions.</p>",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.overview_of_the_trading_market.name": "Overview of the trading market",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.overview_of_the_trading_market.content": "<h1>Overview of the trading market</h1><p>In recent years, the trading market has witnessed tremendous expansion, primarily due to the onset of the Covid-19 pandemic and the ease of accessibility to cryptocurrency trading platforms. As of 2019, the global cryptocurrency market size stood at USD 1.03 billion and is projected to grow at a compound annual growth rate (CAGR) of 11.2% from 2020 to 2027. Furthermore, traditional stock markets persist in their growth, with the worldwide stock market size achieving USD 95.2 trillion in 2019.</p><p>In a realm teeming with diverse assets and intricate market fluctuations, it can pose a considerable challenge for non-traders, or new traders, to traverse the market and make informed investment decisions. Numerous tools and indicators are accessible for market analysis, however, many necessitate a level of understanding and application that is often difficult and  time-consuming. Moreover, many non-traders lack access to these vital tools to begin with, putting them at a disadvantage. MarketRaker AI tackles this problem by offering comprehensible and user-friendly trading indicators that aid in making educated investment choices. MarketRaker AI aims to make trading more accessible and lucrative for a wider audience by streamlining the market analysis process and considering individual risk tolerance.</p>",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.competition.name": "Competition",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.competition.content": "<h2>Competition</h2><p>While platforms like TradingView, CryptoCompare, and Bloomberg Terminal offer valuable market information and tools, MarketRaker AI sets itself apart by providing a simplified and focused experience for users.</p><p>One key aspect that differentiates MarketRaker AI is its emphasis on removing noise and streamlining the decision-making process, similar to Stoic.ai approach. Unlike traditional platforms where users manually analyze vast amounts of information, MarketRaker AI takes a different approach. Users don't need to spend hours sifting through data or conducting in-depth analysis, and offers users the benefit of more free time to focus on their interests and other areas of expertise.</p><p>Instead, they receive indicators they can trust tailored to their risk tolerance and stock/crypto preferences. This eliminates the overwhelming noise and allows users to concentrate solely on potential opportunities.</p><p>Compared to competitors, MarketRaker AI also offers a user-friendly interface that is intuitive and easy to navigate. The platform prioritizes a seamless user experience, ensuring that traders and investors can access and interpret indicators effortlessly. This user-centric design makes MarketRaker AI accessible to both experienced professionals and newcomers in the market.</p><p>Overall, MarketRaker AI stands out by simplifying the trading process and removing noise, allowing users to focus on opportunities that align with their risk tolerance and preferences.</p>",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.marketraker_results.name": "MarketRaker AI Results",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.marketraker_results.content": "<h2>MarketRaker AI Results</h2><p>A comprehensive test period to simulate as well as actual trading results and validate the accuracy of the indicators generated by the platform over a 2-3 month period.</p><p>MarketRaker AI's model is applied to historical market data during this test period, covering various market conditions and timeframes. The purpose of the simulation was to assess the performance of the indicators in identifying profitable trading opportunities and to validate the effectiveness of the model in managing risk.</p><p>The results of the simulation period will be published as soon as we are comfortable that the results are sound, providing an objective and quantitative analysis of the model's performance. Our aim is to have the results verified by a trusted 3rd party as well.</p><p>MarketRaker AI recognises the importance of real-world performance and understands that simulation results may not always reflect actual trading outcomes. Therefore, while the simulation results provide valuable insights, users are encouraged to consider their own risk tolerance and market conditions when making trading decisions.</p>",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.value_marketraker_brings.name": "Value MarketRaker AI Brings",
  "docs_nav_tree.white_paper_v1_0.market_analysis_and_problem_statement.value_marketraker_brings.content": "<h2>Value MarketRaker AI Brings</h2><p>Enhanced Market Insights: Our platform goes beyond traditional market indicators by leveraging AI models to augment market insights. We are able to provide users with actionable insights into market trends, potential opportunities, and risk factors by analyzing vast quantities of data.</p><p>Improved Decision-making Process: We understand that accurate and timely decision-making is crucial in the world of trading. By providing simplified market indicators and identifying optimal entry and exit points, we enable users to be confident in making profitable trading decisions in a timely manner.</p><p>Risk Mitigation: Risk mitigation is a critical aspect of successful trading. Our platform incorporates sophisticated risk management features that assist users in managing their portfolios effectively. By minimizing risks, we aim to enhance the overall trading experience and protect users' investment capital.</p><p>Accessibility and Convenience: We believe that access to high-quality market indicators should be available to all traders, regardless of their level of expertise. By offering intuitive interfaces, customizable dashboards, and real-time notifications, we provide a seamless trading experience for both beginners and experienced professionals.</p><p>Continuous Improvement and Innovation: We are committed to continuous improvement and staying at the forefront of technological advancements in the industry. We will actively seek user feedback, incorporate new data sources, and appropriately monitor, maintain, and refine our algorithms to ensure that our platform evolves with the changing market dynamics.</p>",
  "last_reviewed_on": "Last reviewed on",
  "previous": "Previous",
  "next": "Next",
  "translations_coming_soon": "Translations for the documentation are coming soon."
}
